import InfoArea from "@/components/InfoArea";
import { db } from "@/lib/firebase";
import FirebaseService from "@/lib/firebase.services";
import { formatDate, getCurrentMonth } from "@/utils/dateFormat";
import { endOfMonth } from "date-fns";
import { collection, orderBy, query, where } from "firebase/firestore";
import Head from "next/head";
import { useState } from "react";
import { useCollection } from "react-firebase-hooks/firestore";
import { ClipLoader } from "react-spinners";
import {
  Button,
  DatePicker,
  FlexboxGrid,
  Input,
  List,
  Panel,
  Stack,
} from "rsuite";

export default function Finance() {
  const [description, setDescription] = useState("");
  const [date, setDate] = useState<any>(null);
  const [cost, setCost] = useState<string | number>("");
  const [currentMonth, setCurrentMonth] = useState(getCurrentMonth());

  const { user } = FirebaseService.useAuthState();
  const [value, loading, error] = useCollection(
    query(
      collection(db, "expenses"),
      where("createdAt", ">=", new Date(currentMonth)),
      where("createdAt", "<=", endOfMonth(new Date(currentMonth)))
    )
  );

  const [value2, loading2, error2] = useCollection(
    query(
      collection(db, "sales"),
      where("createdAt", ">=", new Date(currentMonth)),
      where("createdAt", "<=", endOfMonth(new Date(currentMonth))),
      orderBy("createdAt", "desc")
    )
  );

  const data: any = value?.docs.map((doc) => ({
    id: doc.id,
    ...doc.data(),
  }));

  const data2: any = value2?.docs.map((doc) => ({
    id: doc.id,
    ...doc.data(),
  }));

  const expense = data?.reduce((a: any, b: any) => {
    return a + b.cost;
  }, 0);

  const income = data2?.reduce((a: any, b: any) => {
    return a + b.total;
  }, 0);

  const handleMonthChange = (newMonth: string) => {
    setCurrentMonth(newMonth);
  };

  const createData = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    const newDoc = {
      description,
      cost: Number(cost),
      createdAt: date,
    };

    try {
      await FirebaseService.addDocument("expenses", newDoc);
    } catch (err) {
      console.log(err);
    } finally {
      setDescription("");
      setDate(null);
      setCost("");
    }
  };

  const deleteData = async (id: string) => {
    var result = confirm(`Deseja excluir o registro?`);
    if (result) await FirebaseService.deleteDocument("expenses", id);
  };

  if (!user) {
    return (
      <section className="container p-6 mx-auto">
        <h4>Efetue o Login para acessar esta página.</h4>
      </section>
    );
  }

  return (
    <>
      <Head>
        <title>Lucro Líquido</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className="container p-6 mx-auto">
        {error && <strong>Error: {JSON.stringify(error)}</strong>}
        {loading && <ClipLoader color="#36d7b7" />}
        {value && (
          <>
            <Panel bordered className="bg-white mb-4">
              <InfoArea
                currentMonth={currentMonth}
                onMonthChange={handleMonthChange}
                income={income}
                expense={expense}
              />
            </Panel>

            <Panel bordered header="Despesas" className="bg-white mb-4">
              <form onSubmit={createData}>
                <Stack spacing={10} wrap justifyContent="space-between">
                  <Stack.Item grow={1}>
                    <DatePicker
                      block
                      placement="bottom"
                      placeholder="Data..."
                      value={date}
                      onChange={(e) => setDate(e)}
                    />
                  </Stack.Item>
                  <Stack.Item grow={4}>
                    <Input
                      type="text"
                      placeholder="Descrição..."
                      value={description}
                      onChange={(e) => setDescription(e)}
                      required
                    />
                  </Stack.Item>
                  <Stack.Item grow={1}>
                    <Input
                      type="text"
                      placeholder="Valor..."
                      value={cost}
                      onChange={(e) => setCost(e)}
                      required
                    />
                  </Stack.Item>
                  <Button type="submit" appearance="primary" disabled={!user}>
                    Adicionar
                  </Button>
                </Stack>
              </form>
            </Panel>

            <Panel bordered className="bg-white mb-4">
              <List>
                {data?.map((item: any, index: any) => (
                  <List.Item key={index} index={index}>
                    <FlexboxGrid>
                      <FlexboxGrid.Item colspan={5}>
                        {formatDate(item.createdAt.seconds * 1000)}
                      </FlexboxGrid.Item>
                      <FlexboxGrid.Item colspan={10}>
                        {item.description}
                      </FlexboxGrid.Item>
                      <FlexboxGrid.Item colspan={4}>
                        {item.cost.toLocaleString("pt-br", {
                          style: "currency",
                          currency: "BRL",
                          minimumFractionDigits: 2,
                          maximumFractionDigits: 2,
                        })}
                      </FlexboxGrid.Item>
                      <FlexboxGrid.Item colspan={2}>
                        <button
                          className="disabled:text-red-300 text-red-500 hover:text-red-800"
                          disabled={!user}
                          onClick={() => deleteData(item.id)}
                        >
                          Delete
                        </button>
                      </FlexboxGrid.Item>
                    </FlexboxGrid>
                  </List.Item>
                ))}
              </List>
            </Panel>
          </>
        )}
      </section>
    </>
  );
}
