import ModalItem from "@/components/ModalItem";
import { db } from "@/lib/firebase";
import FirebaseService from "@/lib/firebase.services";
import { formatDate, formatDateTime } from "@/utils/dateFormat";
import { generatePDF } from "@/utils/generatePDF";
import { MagnifyingGlassIcon } from "@heroicons/react/24/solid";
import { endOfMonth, startOfMonth } from "date-fns";
import { collection, orderBy, query, where } from "firebase/firestore";
import Head from "next/head";
import { useState } from "react";
import { useCollection } from "react-firebase-hooks/firestore";
import { ClipLoader } from "react-spinners";
import {
  Button,
  DateRangePicker,
  Pagination,
  Panel,
  Stack,
  Table,
} from "rsuite";

const { Column, HeaderCell, Cell } = Table;

export default function Order() {
  const [open, setOpen] = useState(false);
  const [temp, setTemp] = useState([]);
  const [dateRange, setDateRange] = useState<any>([
    startOfMonth(new Date()),
    endOfMonth(new Date()),
  ]);

  const { user } = FirebaseService.useAuthState();

  const [value, loading, error] = useCollection(
    !dateRange
      ? query(collection(db, "sales"), orderBy("createdAt", "asc"))
      : query(
          collection(db, "sales"),
          where("createdAt", ">=", dateRange[0]),
          where("createdAt", "<=", dateRange[1]),
          orderBy("createdAt", "asc")
        )
  );

  const orders: any = value?.docs.map((doc) => ({
    id: doc.id,
    ...doc.data(),
  }));

  const total = orders?.reduce((a: any, b: any) => {
    return a + b.total;
  }, 0);

  const handleOpen = (items: any) => {
    setTemp(items);
    setOpen(true);
  };

  const handleClose = () => setOpen(false);

  if (!user) {
    return (
      <section className="container p-6 mx-auto">
        <h4>Efetue o Login para acessar esta página.</h4>
      </section>
    );
  }

  return (
    <>
      <Head>
        <title>Vendas</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className="container p-6 mx-auto">
        {error && <strong>Error: {JSON.stringify(error)}</strong>}
        {loading && <ClipLoader color="#36d7b7" />}
        {orders && (
          <Panel
            bordered
            header={<h3 className="title">Histórico de Venda</h3>}
            className="bg-white mb-4"
          >
            <Stack
              className="table-toolbar mb-3"
              justifyContent="space-between"
            >
              <DateRangePicker
                value={dateRange}
                onChange={setDateRange}
                format="yyyy-MM-dd HH:mm:ss"
                placeholder="Select Date Range"
              />
              <Stack spacing={6}>
                <Button
                  color="green"
                  appearance="primary"
                  disabled={orders?.length < 1}
                  onClick={() => generatePDF(orders, dateRange, total)}
                >
                  Export PDF
                </Button>
              </Stack>
            </Stack>

            <Table
              bordered
              virtualized
              height={400}
              data={orders}
              hover={false}
            >
              <Column width={50} align="center" fixed>
                <HeaderCell>#</HeaderCell>
                <Cell dataKey="id">{(rowData, index: any) => ++index}</Cell>
              </Column>

              <Column width={200}>
                <HeaderCell>Pedido</HeaderCell>
                <Cell>
                  {(rowData) => rowData.table || rowData.custumer?.name}
                </Cell>
              </Column>

              <Column width={130}>
                <HeaderCell>Total</HeaderCell>
                <Cell>
                  {(rowData) =>
                    rowData.total.toLocaleString("pt-br", {
                      style: "currency",
                      currency: "BRL",
                      minimumFractionDigits: 2,
                      maximumFractionDigits: 2,
                    })
                  }
                </Cell>
              </Column>

              <Column width={200}>
                <HeaderCell>Data</HeaderCell>
                <Cell>
                  {(rowData) => formatDate(rowData.createdAt.seconds * 1000)}
                </Cell>
              </Column>

              <Column width={200}>
                <HeaderCell>Hora</HeaderCell>
                <Cell>
                  {(rowData) =>
                    formatDateTime(rowData.createdAt.seconds * 1000)
                  }
                </Cell>
              </Column>

              <Column flexGrow={1} width={200}>
                <HeaderCell>Ação</HeaderCell>
                <Cell>
                  {(rowData) => (
                    <div className="flex gap-4">
                      <button
                        onClick={() => handleOpen(rowData)}
                        className="text-blue-500 hover:text-blue-800"
                      >
                        <MagnifyingGlassIcon className="w-4 h-4" />
                      </button>
                    </div>
                  )}
                </Cell>
              </Column>
            </Table>
            <div className="p-4">
              <Pagination layout={["total"]} total={orders.length} />
            </div>
          </Panel>
        )}
        <ModalItem
          open={open}
          onClose={handleClose}
          onPrint={false}
          temp={temp}
        />
      </section>
    </>
  );
}
