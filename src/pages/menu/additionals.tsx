import FormAdditional from "@/components/Form/FormAdditional";
import FirebaseService from "@/lib/firebase.services";
import { PencilSquareIcon, TrashIcon } from "@heroicons/react/24/solid";
import Head from "next/head";
import { useState } from "react";
import { ClipLoader } from "react-spinners";
import { Button, Panel, Stack, Table } from "rsuite";

const { Column, HeaderCell, Cell } = Table;

export default function Additionals() {
  const [open, setOpen] = useState(false);
  const [temp, setTemp] = useState([]);

  const { user } = FirebaseService.useAuthState();
  const { data, loading, error } = FirebaseService.getDocument(
    "additionals",
    "name",
    "asc"
  );

  const createHandler = () => {
    setOpen(true);
    setTemp([]);
  };

  const updateHandler = (item: any) => {
    setOpen(true);
    setTemp(item);
  };

  const deleteData = async (id: string, name: string) => {
    var result = confirm(`Deseja excluir: ${name}?`);
    if (result) await FirebaseService.deleteDocument("additionals", id);
  };

  /*const columns = [
    {
      name: "Nome",
      selector: (row: any) => row.name,
    },
    {
      name: "Preço Broto",
      selector: (row: any) =>
        row.priceOne.toLocaleString("pt-br", {
          style: "currency",
          currency: "BRL",
          minimumFractionDigits: 2,
          maximumFractionDigits: 2,
        }),
    },
    {
      name: "Preço Grande",
      selector: (row: any) =>
        row.priceTwo.toLocaleString("pt-br", {
          style: "currency",
          currency: "BRL",
          minimumFractionDigits: 2,
          maximumFractionDigits: 2,
        }),
    },
    {
      name: "Actions",
      selector: (row: any) => (
        <div className="flex gap-4">
          <button
            disabled={!user}
            onClick={() => updateHandler(row)}
            className="hover:text-blue-500 disabled:text-gray-300"
          >
            <PencilSquareIcon className="w-4 h-4" />
          </button>
          <button
            disabled={!user}
            onClick={() => deleteData(row.id, row.name)}
            className="hover:text-blue-500 disabled:text-gray-300"
          >
            <TrashIcon className="w-4 h-4" />
          </button>
        </div>
      ),
    },
  ];*/

  return (
    <>
      <Head>
        <title>Bordas Recheadas</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className="container p-6 mx-auto">
        {error && <strong>Error: {JSON.stringify(error)}</strong>}
        {loading && <ClipLoader color="#36d7b7" />}
        {data && (
          <Panel
            bordered
            header={<h3 className="title">Borda Recheada</h3>}
            className="bg-white mb-4"
          >
            <Stack
              className="table-toolbar mb-3"
              justifyContent="space-between"
            >
              <Button
                color="blue"
                appearance="primary"
                disabled={!user}
                onClick={() => createHandler()}
              >
                Cadastrar Borda Recheada
              </Button>
            </Stack>
            <Table bordered virtualized height={400} data={data}>
              <Column width={50} align="center" fixed>
                <HeaderCell>#</HeaderCell>
                <Cell dataKey="id">{(rowData, index: any) => ++index}</Cell>
              </Column>

              <Column flexGrow={1}>
                <HeaderCell>Nome</HeaderCell>
                <Cell>{(rowData) => rowData.name}</Cell>
              </Column>

              <Column flexGrow={1}>
                <HeaderCell>Preço Broto</HeaderCell>
                <Cell>
                  {(rowData) =>
                    rowData.priceOne.toLocaleString("pt-br", {
                      style: "currency",
                      currency: "BRL",
                      minimumFractionDigits: 2,
                      maximumFractionDigits: 2,
                    })
                  }
                </Cell>
              </Column>

              <Column flexGrow={1}>
                <HeaderCell>Preço Grande</HeaderCell>
                <Cell>
                  {(rowData) =>
                    rowData.priceTwo.toLocaleString("pt-br", {
                      style: "currency",
                      currency: "BRL",
                      minimumFractionDigits: 2,
                      maximumFractionDigits: 2,
                    })
                  }
                </Cell>
              </Column>

              <Column flexGrow={1}>
                <HeaderCell>Ação</HeaderCell>
                <Cell>
                  {(rowData) => (
                    <div className="flex gap-4">
                      <button
                        disabled={!user}
                        onClick={() => updateHandler(rowData)}
                        className="text-green-500 hover:text-green-800 disabled:text-gray-300"
                      >
                        <PencilSquareIcon className="w-4 h-4" />
                      </button>
                      <button
                        disabled={!user}
                        onClick={() => deleteData(rowData.id, rowData.name)}
                        className="text-red-500 hover:text-red-800 disabled:text-gray-300"
                      >
                        <TrashIcon className="w-4 h-4" />
                      </button>
                    </div>
                  )}
                </Cell>
              </Column>
            </Table>
          </Panel>
        )}
        {open && (
          <FormAdditional
            open={open}
            onClose={() => setOpen(false)}
            temp={temp}
          />
        )}
      </section>
    </>
  );
}
