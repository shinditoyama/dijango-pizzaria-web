import FormCustumer from "@/components/Form/FormCustumer";
import FirebaseService from "@/lib/firebase.services";
import { PencilSquareIcon, TrashIcon } from "@heroicons/react/24/solid";
import SearchIcon from "@rsuite/icons/Search";
import Head from "next/head";
import Link from "next/link";
import { useState } from "react";
import { ClipLoader } from "react-spinners";
import {
  Button,
  Input,
  InputGroup,
  Pagination,
  Panel,
  Stack,
  Table,
} from "rsuite";

const { Column, HeaderCell, Cell } = Table;

export default function Custumer() {
  const [open, setOpen] = useState(false);
  const [temp, setTemp] = useState([]);
  const [filterText, setFilterText] = useState("");

  const { user } = FirebaseService.useAuthState();
  const { data, loading, error } = FirebaseService.getDocument(
    "custumers",
    "name",
    "asc"
  );

  const createHandler = () => {
    setOpen(true);
    setTemp([]);
  };

  const updateHandler = (item: any) => {
    setOpen(true);
    setTemp(item);
  };

  const deleteData = async (id: string, name: string) => {
    var result = confirm(`Deseja excluir: ${name}?`);
    if (result) await FirebaseService.deleteDocument("custumers", id);
  };

  const filteredItems = data?.filter(
    (item: any) =>
      item.name && item.name.toLowerCase().includes(filterText.toLowerCase())
  );

  return (
    <>
      <Head>
        <title>Clientes</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className="container p-6 mx-auto">
        {error && <strong>Error: {JSON.stringify(error)}</strong>}
        {loading && <ClipLoader color="#36d7b7" />}
        {data && (
          <Panel
            bordered
            header={<h3 className="title">Cliente</h3>}
            className="bg-white mb-4"
          >
            <Stack
              className="table-toolbar mb-3"
              justifyContent="space-between"
            >
              <Button
                color="blue"
                appearance="primary"
                disabled={!user}
                onClick={() => createHandler()}
              >
                Cadastrar Cliente
              </Button>
              <Stack spacing={6}>
                <InputGroup inside>
                  <Input
                    placeholder="Pesquisar"
                    value={filterText}
                    onChange={setFilterText}
                  />
                  <InputGroup.Addon>
                    <SearchIcon />
                  </InputGroup.Addon>
                </InputGroup>
              </Stack>
            </Stack>
            <Table bordered virtualized height={400} data={filteredItems}>
              <Column width={50} align="center" fixed>
                <HeaderCell>#</HeaderCell>
                <Cell dataKey="id">{(rowData, index: any) => ++index}</Cell>
              </Column>

              <Column flexGrow={1}>
                <HeaderCell>Nome</HeaderCell>
                <Cell>
                  {(rowData) => (
                    <Link href={`/custumer/${rowData.id}`}>{rowData.name}</Link>
                  )}
                </Cell>
              </Column>

              <Column flexGrow={1}>
                <HeaderCell>Telefone</HeaderCell>
                <Cell>{(rowData) => rowData.telephone}</Cell>
              </Column>

              <Column flexGrow={1}>
                <HeaderCell>Endereço</HeaderCell>
                <Cell>{(rowData) => rowData.address}</Cell>
              </Column>

              <Column flexGrow={1}>
                <HeaderCell>Ação</HeaderCell>
                <Cell>
                  {(rowData) => (
                    <div className="flex gap-4">
                      <button
                        disabled={!user}
                        onClick={() => updateHandler(rowData)}
                        className="text-green-500 hover:text-green-800 disabled:text-gray-300"
                      >
                        <PencilSquareIcon className="w-4 h-4" />
                      </button>
                      <button
                        disabled={!user}
                        onClick={() => deleteData(rowData.id, rowData.name)}
                        className="text-red-500 hover:text-red-800 disabled:text-gray-300"
                      >
                        <TrashIcon className="w-4 h-4" />
                      </button>
                    </div>
                  )}
                </Cell>
              </Column>
            </Table>
            <div className="p-4">
              <Pagination layout={["total"]} total={filteredItems.length} />
            </div>
          </Panel>
        )}
        {open && (
          <FormCustumer
            open={open}
            onClose={() => setOpen(false)}
            temp={temp}
          />
        )}
      </section>
    </>
  );
}
