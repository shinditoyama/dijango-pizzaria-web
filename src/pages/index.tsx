import ModalItem from "@/components/ModalItem";
import FirebaseService from "@/lib/firebase.services";
import { formatDate, formatDateTime } from "@/utils/dateFormat";
import {
  CheckIcon,
  MagnifyingGlassIcon,
  XMarkIcon,
} from "@heroicons/react/24/solid";
import { serverTimestamp } from "firebase/firestore";
import Head from "next/head";
import { useState } from "react";
import { ClipLoader } from "react-spinners";
import { Pagination, Panel, Table } from "rsuite";

const { Column, HeaderCell, Cell } = Table;

export default function Home() {
  const [open, setOpen] = useState(false);
  const [temp, setTemp] = useState([]);
  const { data, loading, error } = FirebaseService.getDocument(
    "orders",
    "createdAt",
    "desc"
  );

  const confirmOrder = async (order: any) => {
    var result = confirm(`Confirmar pedido?`);
    if (result) {
      await FirebaseService.addDocument("sales", {
        custumer: order.custumer,
        table: order.table,
        items: order.items,
        total: order.total,
        createdAt: serverTimestamp(),
      });
      await FirebaseService.deleteDocument("orders", order.id);
    }
  };

  const deleteOrder = async (id: string) => {
    var result = confirm(`Deseja cancelar o pedido?`);
    if (result) await FirebaseService.deleteDocument("orders", id);
  };

  const handleOpen = (items: any) => {
    setTemp(items);
    setOpen(true);
  };

  const handleClose = () => setOpen(false);

  return (
    <>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className="container p-6 mx-auto">
        {error && <strong>Error: {JSON.stringify(error)}</strong>}
        {loading && <ClipLoader color="#36d7b7" />}
        {data && (
          <Panel
            bordered
            header={<h3 className="title">Pedidos</h3>}
            className="bg-white mb-4"
          >
            <Table bordered virtualized height={400} data={data} hover={false}>
              <Column width={50} align="center" fixed>
                <HeaderCell>#</HeaderCell>
                <Cell dataKey="id">{(rowData, index: any) => ++index}</Cell>
              </Column>

              <Column width={200}>
                <HeaderCell>Pedido</HeaderCell>
                <Cell>
                  {(rowData) => rowData.table || rowData.custumer?.name}
                </Cell>
              </Column>

              <Column width={130}>
                <HeaderCell>Total</HeaderCell>
                <Cell>
                  {(rowData) =>
                    rowData.total.toLocaleString("pt-br", {
                      style: "currency",
                      currency: "BRL",
                      minimumFractionDigits: 2,
                      maximumFractionDigits: 2,
                    })
                  }
                </Cell>
              </Column>

              <Column width={200}>
                <HeaderCell>Data</HeaderCell>
                <Cell>
                  {(rowData) => formatDate(rowData.createdAt.seconds * 1000)}
                </Cell>
              </Column>

              <Column width={200}>
                <HeaderCell>Hora</HeaderCell>
                <Cell>
                  {(rowData) =>
                    formatDateTime(rowData.createdAt.seconds * 1000)
                  }
                </Cell>
              </Column>

              <Column flexGrow={1} width={200}>
                <HeaderCell>Ação</HeaderCell>
                <Cell>
                  {(rowData) => (
                    <div className="flex gap-4">
                      <button
                        onClick={() => handleOpen(rowData)}
                        className="text-blue-500 hover:text-blue-800"
                      >
                        <MagnifyingGlassIcon className="w-4 h-4" />
                      </button>
                      <button
                        onClick={() => confirmOrder(rowData)}
                        className="text-green-500 hover:text-green-800"
                      >
                        <CheckIcon className="w-4 h-4" />
                      </button>
                      <button
                        onClick={() => deleteOrder(rowData.id)}
                        className="text-red-500 hover:text-red-800"
                      >
                        <XMarkIcon className="w-4 h-4" />
                      </button>
                    </div>
                  )}
                </Cell>
              </Column>
            </Table>
            <div className="p-4">
              <Pagination layout={["total"]} total={data.length} />
            </div>
          </Panel>
        )}
        <ModalItem
          open={open}
          onClose={handleClose}
          onPrint={true}
          temp={temp}
        />
      </section>
    </>
  );
}
